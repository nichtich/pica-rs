var searchIndex = JSON.parse('{\
"pica":{"doc":"","t":"DNEDNDNNNNNNNNNNNNENNDDDDDIDDDGEDDDDNNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLNNENNNENNNNNNENNNNNNNDNNNNENNNENNNNNNNEENENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ByteRecord","Copy","Error","Field","Field","GzipWriter","InvalidField","InvalidFieldMatcher","InvalidMatcher","InvalidOccurrence","InvalidOccurrenceMatcher","InvalidPath","InvalidRecord","InvalidSubfield","InvalidSubfieldMatcher","InvalidSubfieldsMatcher","InvalidTag","Io","Level","Local","Main","Occurrence","Outcome","ParsePathError","ParsePicaError","Path","PicaWriter","PlainWriter","Reader","ReaderBuilder","Result","Selector","Selectors","StringRecord","Subfield","Tag","Utf8Error","Value","WriterBuilder","add","all","all","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer_size","byte_records","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","code","contains_code","data","decode","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","finish","finish","finish","first","first","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_byte_record","from_bytes","from_bytes","from_bytes","from_path","from_path","from_path_or_stdin","from_path_or_stdout","from_reader","from_str","from_str","from_values","from_writer","get","gzip","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","level","limit","matcher","message","mul","new","new","new","new","new","new","new","new","new","new","new","occurrence","one","partial_cmp","path","provide","provide","provide","records","reduce","select","serialize","serialize","serialize","skip_invalid","subfields","tag","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate","validate","validate","value","write","write","write","write","write","write_byte_record","write_byte_record","write_byte_record","And","Any","BooleanOp","Cardinality","Cardinality","Comparison","ComparisonOp","Composite","Composite","EndsWith","Eq","Exists","Exists","FieldMatcher","Ge","Group","Group","Gt","In","Le","Lt","MatcherFlags","Ne","None","Not","Not","OccurrenceMatcher","Or","Pattern","Range","RecordMatcher","Regex","Similar","Singleton","Singleton","Some","Some","StartsWith","SubfieldListMatcher","SubfieldMatcher","Subield","TagMatcher","True","bitand","bitand","bitor","bitor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","ignore_case","ignore_case","into","into","into","into","into","into","into","into","into","is_match","is_match","is_match","is_match","is_match","is_match","new","new","new","new","new","new","new","not","strsim_threshold","strsim_threshold","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"pica"],[336,"pica::matcher"]],"d":["A PICA+ record, that may contian invalid UTF-8 data.","","An error that can occur when processing PICA+ data.","A PICA+ field, that may contian invalid UTF-8 data.","","","","","","","","","","","","","","","","","","A PICA+ occurrence.","","","An error that can occur when parsing PICA+ records.","","","A writer to write PICA+ records.","A reader to read PICA+ records.","Configures and builds a PICA+ reader.","A type alias for <code>Result&lt;T, pica::Error&gt;</code>.","","","A PICA+ record, that guarantees valid UTF-8 data.","A PICA+ subfield, that may contian invalid UTF-8 data.","A PICA+ tag.","","","Configures and builds a PICA+ writer.","","Returns the all subfield values for the subfield code","Returns all fields matching the given tag","Whether to append to a given file or not.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Change the inital capacity of an new <code>ByteRecord</code>.","Returns an iterator over all <code>ByteRecord</code>s.","","","","","","","","","Get a reference to the subfield’s code.","Returns <code>true</code> if the <code>Field</code> contains a <code>Subfield</code> with the …","","","","","","","Dereferences the value","","","Dereferences the value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Flushes the underlying writer.","","Returns the first subfield value","Returns the first field matching the given tag","","","","","Format the field in a human-readable format.","","Format the occurrence in a human-readable format.","","","","","","","","","","Format the subfield in a human-readable format.","","Format the subfield in a human-readable format.","","","","Format the subfield in a human-readable format.","","Format the tag in a human-readable format.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>StringRecord</code> from a <code>ByteRecord</code>","Creates a new <code>Path</code> from a byte vector.","Creates a new ByteRecord from a byte vector.","Creates a new <code>StringRecord</code> from a bytes vector.","Builds a new <code>Reader</code> with the current configuration, that …","Builds a new <code>Writer</code> with the current configuration, that …","Builds a new <code>Reader</code> with the current configuration, that …","Builds a new <code>Writer</code> with the current configuration, that …","Builds a new <code>Reader</code> with the current configuration, that …","","Parse a <code>Path</code> from a string.","","Builds a new <code>Writer</code> with the current configuration, that …","Returns a list of references to all <code>Subfields</code> of the given …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the <code>Level</code> of the tag.","Change the limit of records to read.","","","","Creates a new <code>Field</code>","Creates a PICA+ occurrence from a string slice.","Creates a new path","Create a new <code>ReaderBuilder</code> for reading PICA+ data.","Create a new reader","Creates a new <code>ByteRecord</code>","Creates a new <code>Subfield</code>","Creates a PICA+ tag from a string slice.","Create a new <code>WriterBuilder</code> for writing PICA+ records.","Creates a new writer","","Get a reference to the field’s occurrence.","","","Returns all subfield values of a given path.","","","","Returns an iterator over all <code>StringRecord</code>s.","Reduce the record to the given fields.","","","","","Whether to skip invalid records or not.","Get a reference to the field’s occurrence.","Get a reference to the field’s tag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if and only if all subfield values are valid …","Returns <code>true</code> if no fields contains invalid subfield values.","Returns <code>true</code> if the subfield value is valid UTF-8 byte …","Get a reference to the subfield’s value.","Write the field into the given writer.","Write the field into the given writer.","Write the subfield into the given writer.","","","","Write a byte record into this writer","","","","Boolean Operators.","","","","Comparison Operators","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A subfield matcher.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true, if and only if the given field matches …","Returns true, if and only if the given value matches …","Returns true, if and only if the given record matches …","Returns true, if and only if the given subfield list …","Returns true, if and only if the given subfield matches …","Returns true, if and only if the given tag matches against …","Creates a field matcher from a string slice.","","Creates a occurrence matcher from a string slice.","Creates a record matcher from a string slice.","Creates a subfield list matcher from a string slice.","Creates a subfield matcher from a string slice.","Creates a tag matcher from a string slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,27,0,0,21,0,31,31,31,31,31,31,31,31,31,31,31,31,0,27,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,21,0,1,2,7,9,18,31,2,15,25,34,26,11,14,7,22,21,1,16,17,27,9,24,29,18,31,2,15,25,34,26,11,14,7,22,21,1,16,17,27,9,24,29,11,14,2,15,16,17,2,15,16,17,16,2,25,18,11,1,9,18,2,15,14,7,22,1,17,24,14,24,2,15,15,25,26,7,22,21,16,17,17,27,2,15,25,26,7,22,16,17,27,43,24,29,2,7,24,29,31,31,2,2,15,15,25,25,34,34,26,11,14,7,7,22,22,21,1,16,16,17,17,27,9,24,29,18,31,31,31,31,31,2,15,25,34,26,11,14,7,22,21,1,16,17,27,9,24,29,22,26,7,22,11,9,11,9,11,2,26,1,9,2,9,18,31,2,15,25,34,26,11,14,7,22,21,1,16,17,27,9,24,29,1,17,11,0,25,1,2,15,26,11,14,7,16,17,9,24,29,2,1,15,7,31,25,34,14,7,7,2,22,16,11,2,2,2,15,16,17,31,2,15,25,34,7,22,16,17,18,31,2,15,25,34,26,11,14,7,22,21,1,16,17,27,9,24,29,18,31,2,15,25,34,26,11,14,7,22,21,1,16,17,27,9,24,29,18,31,2,15,25,34,26,11,14,7,22,21,1,16,17,27,9,24,29,2,7,16,16,2,7,16,24,29,43,24,29,52,44,0,50,51,56,0,50,51,53,53,55,56,0,53,50,51,53,56,53,53,0,53,44,50,51,0,52,57,44,0,56,53,50,51,44,57,53,0,0,55,0,50,50,51,50,51,52,53,55,54,44,50,51,56,57,52,53,55,54,44,50,51,56,57,52,53,44,52,53,44,54,52,53,55,44,50,51,56,57,52,53,44,56,57,52,52,53,53,55,55,54,44,44,50,50,51,51,56,56,57,57,52,53,55,54,44,44,50,50,51,51,56,57,57,54,54,52,53,55,54,44,50,51,56,57,55,44,50,51,56,57,55,54,44,50,51,56,57,50,54,54,52,53,44,52,53,55,44,50,51,56,57,52,53,55,54,44,50,51,56,57,52,53,55,54,44,50,51,56,57,52,53,55,54,44,50,51,56,57],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1]],[[2,3],[[6,[[5,[4]]]]]],[[7,8],[[6,[[5,[2]]]]]],[[9,10],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[11,12],11],[[[14,[13]]],[[0,[13]]]],[2,2],[15,15],[16,16],[17,17],[[]],[[]],[[]],[[]],[16,3],[[2,3],10],0,[8,[[20,[18,19]]]],[[],11],[[],1],[[],9],[18,[[5,[21]]]],[2],[15],[[[14,[13]]]],[7],[22],[1],[17],[[[24,[23]]]],[[[14,[13]]]],[[[24,[23]]]],[[2,2],10],[[15,15],10],[[15,8],10],[[25,25],10],[[26,26],10],[[7,7],10],[[22,22],10],[[21,21],10],[[16,16],10],[[17,17],10],[[17,8],10],[[27,27],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],28],[[[24,[23]]],28],[[[29,[23]]],28],[[2,3],[[6,[4]]]],[[7,8],[[6,[2]]]],[[[24,[23]]],[[20,[30]]]],[[[29,[23]]],[[20,[30]]]],[[31,32],33],[[31,32],33],[[2,32],33],[[2,32],33],[[15,32],33],[[15,32],33],[[25,32],33],[[25,32],33],[[34,32],33],[[34,32],33],[[26,32],33],[[11,32],33],[[[14,[35]],32],33],[[7,32],33],[[7,32],[[20,[36]]]],[[22,32],33],[[22,32],[[20,[36]]]],[[21,32],33],[[1,32],33],[[16,32],33],[[16,32],33],[[17,32],33],[[17,32],33],[[27,32],33],[[9,32],33],[[[24,[[0,[35,23]]]],32],33],[[[29,[[0,[35,23]]]],32],33],[[]],[37,31],[25,31],[34,31],[[]],[30,31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,[[28,[22]]]],[[[39,[[5,[38]]]]],[[20,[26,34]]]],[[[39,[[5,[38]]]]],[[20,[7,25]]]],[[[39,[[5,[38]]]]],[[28,[22]]]],[[11,[41,[40]]],[[28,[[14,[[42,[13]]]]]]]],[[9,[41,[40]]],[[28,[[42,[43]]]]]],[[11,[6,[[41,[40]]]]],[[28,[[14,[[42,[13]]]]]]]],[[9,[6,[[41,[40]]]]],[[28,[[42,[43]]]]]],[[11,13],[[14,[13]]]],[8,[[28,[2]]]],[8,[[20,[26]]]],[[[5,[4]]],1],[[9,23],[[42,[43]]]],[[2,3],[[6,[[5,[16]]]]]],[[9,10],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,10],[17,27],[[11,12],11],0,0,[[1,1],1],[[17,[6,[15]],[5,[16]]],2],[[[41,[8]]],[[20,[15,31]]]],[[[41,[8]],44,[5,[3]]],[[28,[26]]]],[[],11],[[11,13],[[14,[13]]]],[[[5,[2]]],7],[[3,[39,[4]]],[[28,[16]]]],[[[41,[8]]],[[20,[17,31]]]],[[],9],[[9,23],[[24,[23]]]],[23,[[29,[23]]]],[2,[[6,[15]]]],[[],1],[[15,15],[[6,[45]]]],[[7,26],[[5,[4]]]],[46],[46],[46],[[[14,[13]]],[[0,[13]]]],[[7,47]],[[7,21,10],1],[[2,48],20],[[22,48],20],[[16,48],20],[[11,10],11],[2,[[5,[16]]]],[2,17],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[2,28],[7,28],[16,28],[16,4],[[2,23],28],[[7,23],28],[[16,23],28],[[[24,[23]],[47,[38]]],[[20,[12,30]]]],[[[29,[23]],[47,[38]]],[[20,[12,30]]]],[7,28],[[[24,[23]],7],28],[[[29,[23]],7],28],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[50,50]],[[51,51]],[[50,50]],[[51,51]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[52,52],[53,53],[44,44],[[]],[[]],[[]],[[],54],[[52,52],10],[[53,53],10],[[55,55],10],[[44,44],10],[[50,50],10],[[51,51],10],[[56,56],10],[[57,57],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[52,32],33],[[52,32],33],[[53,32],33],[[53,32],33],[[55,32],33],[[55,32],33],[[54,32],33],[[44,32],33],[[44,32],33],[[50,32],33],[[50,32],33],[[51,32],33],[[51,32],33],[[56,32],33],[[56,32],33],[[57,32],33],[[57,32],33],[[]],[[]],[[]],[[]],[15,44],[[]],[[]],[55,50],[[]],[56,51],[[]],[17,57],[[]],[[54,10],54],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[55,2,54],10],[[44,[6,[15]]],10],[[50,7,54],10],[[51,[47,[16]],54],10],[[56,16,54],10],[[57,17],10],[[[41,[8]]],[[20,[55,31]]]],[[],54],[[[41,[8]]],[[20,[44,31]]]],[[[41,[8]]],[[20,[50,31]]]],[[[41,[8]]],[[20,[51,31]]]],[[[41,[8]]],[[20,[56,31]]]],[[[41,[8]]],[[20,[57,31]]]],[50],[[54,58],54],0,[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49]],"c":[],"p":[[3,"Outcome"],[3,"Field"],[15,"char"],[3,"BString"],[3,"Vec"],[4,"Option"],[3,"ByteRecord"],[15,"str"],[3,"WriterBuilder"],[15,"bool"],[3,"ReaderBuilder"],[15,"usize"],[8,"Read"],[3,"Reader"],[3,"Occurrence"],[3,"Subfield"],[3,"Tag"],[3,"Selectors"],[3,"String"],[4,"Result"],[4,"Selector"],[3,"StringRecord"],[8,"Write"],[3,"PlainWriter"],[3,"ParsePicaError"],[3,"Path"],[4,"Level"],[6,"Result"],[3,"GzipWriter"],[3,"Error"],[4,"Error"],[3,"Formatter"],[6,"Result"],[3,"ParsePathError"],[8,"Debug"],[3,"Error"],[3,"Utf8Error"],[15,"u8"],[8,"Into"],[3,"Path"],[8,"AsRef"],[3,"Box"],[8,"PicaWriter"],[4,"OccurrenceMatcher"],[4,"Ordering"],[3,"Demand"],[15,"slice"],[8,"Serializer"],[3,"TypeId"],[4,"RecordMatcher"],[4,"SubfieldListMatcher"],[4,"BooleanOp"],[4,"ComparisonOp"],[3,"MatcherFlags"],[4,"FieldMatcher"],[4,"SubfieldMatcher"],[4,"TagMatcher"],[15,"f64"]]},\
"pica_lint":{"doc":"","t":"AAAFAAAADLLLLLLMLLLLLLMMLLLLLDIAKKMDLLLLLLLLLLLMNNNNNNIENNNNENLLLLKLALLALLLLLALLLLLLLLLAAALLALLLLLLLADLLLLLLLMLLLDLLLFLLMLLMMLLLDLLMLLMLLLMLLLDLLLLLLLMLLLHDLLLOLLLLMLLLDLLLLLLLMMLLLDLLLLMMLLLLLMMLLLMDLLLLLLLLLLDMLLLMLLLMMMLLLLLNNEDDNMMMAMMMMAMMANNENLLLLLLLLLLLLLLLDLLMLLLLMLMMLLLLLLDLLLMLLLLLLMMLMMLLLDLLLMLMLLMLLMLLLMF","n":["cli","formatter","lints","main","progress","rules","stats","util","Args","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","filenames","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","into","output","rules","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","CsvFormatter","Formatter","csv","finish","fmt","writer","CsvFormatter","borrow","borrow_mut","finish","fmt","fmt","from","into","new","try_from","try_into","type_id","writer","Checksum","Date","Filter","Hit","Iri","Iso639","Lint","Lints","Miss","Orcid","Postponed","RefCheck","Status","Unicode","borrow","borrow","borrow_mut","borrow_mut","check","check","checksum","clone","clone_into","date","default","deserialize","eq","equivalent","equivalent","filter","finish","finish","fmt","fmt","from","from","from","into","into","iri","iso639","orcid","preprocess","preprocess","refcheck","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unicode","Checksum","borrow","borrow_mut","check","deserialize","fmt","from","into","path","try_from","try_into","type_id","Date","borrow","borrow_mut","check","default_fmt","deserialize","fmt","format","from","into","offset","path","try_from","try_into","type_id","Filter","borrow","borrow_mut","case_ignore","check","deserialize","filter","fmt","from","into","invert","try_from","try_into","type_id","Iri","borrow","borrow_mut","check","deserialize","fmt","from","into","path","try_from","try_into","type_id","ISO639_CODES","Iso639","borrow","borrow_mut","check","codes","deserialize","fmt","from","into","path","try_from","try_into","type_id","Orcid","borrow","borrow_mut","check","deserialize","fmt","from","into","path","prefix","try_from","try_into","type_id","RefCheck","borrow","borrow_mut","check","deserialize","dst","filter","finish","fmt","from","into","preprocess","seen","src","try_from","try_into","type_id","unseen","Unicode","borrow","borrow_mut","check","deserialize","fmt","from","into","try_from","try_into","type_id","Progress","bars","borrow","borrow_mut","finish","footer","from","into","new","records","stats","summary","try_from","try_into","type_id","update","update_stats","Error","Info","Level","Rule","RuleSet","Warning","description","description","id","level","level","lint","name","organizational_unit","rule","rules","scope","set","Error","Info","Level","Warning","borrow","borrow_mut","clone","clone_into","default","deserialize","fmt","fmt","from","into","to_owned","to_string","try_from","try_into","type_id","Rule","borrow","borrow_mut","description","deserialize","finish","fmt","from","id","into","level","lint","preprocess","process","set_id","try_from","try_into","type_id","RuleSet","borrow","borrow_mut","check","description","deserialize","finish","fmt","from","from_path","into","name","organizational_unit","preprocess","rules","scope","try_from","try_into","type_id","Stats","add_assign","borrow","borrow_mut","checks","default","errors","fmt","from","infos","into","new","records","try_from","try_into","type_id","warnings","reader"],"q":[[0,"pica_lint"],[8,"pica_lint::cli"],[29,"pica_lint::formatter"],[35,"pica_lint::formatter::csv"],[48,"pica_lint::lints"],[101,"pica_lint::lints::checksum"],[113,"pica_lint::lints::date"],[128,"pica_lint::lints::filter"],[142,"pica_lint::lints::iri"],[154,"pica_lint::lints::iso639"],[168,"pica_lint::lints::orcid"],[181,"pica_lint::lints::refcheck"],[199,"pica_lint::lints::unicode"],[210,"pica_lint::progress"],[227,"pica_lint::rules"],[245,"pica_lint::rules::level"],[264,"pica_lint::rules::rule"],[282,"pica_lint::rules::set"],[301,"pica_lint::stats"],[318,"pica_lint::util"]],"d":["","","","","","","","","","","","","","","","Read one or more files in normalized PICA+ format. If no …","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Write output to  instead of stdout","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Create a new rule set from a spec file.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,38,38,15,0,15,15,15,15,15,15,15,15,15,15,15,15,19,19,19,18,19,19,0,0,18,19,18,19,0,19,19,18,19,18,44,19,0,18,18,0,18,19,18,18,18,0,44,19,19,18,19,18,18,19,18,0,0,0,44,19,0,18,19,18,19,18,19,18,0,0,23,23,23,23,23,23,23,23,23,23,23,0,24,24,24,0,24,24,24,24,24,24,24,24,24,24,0,26,26,26,26,26,26,26,26,26,26,26,26,26,0,27,27,27,27,27,27,27,27,27,27,27,0,0,28,28,28,0,28,28,28,28,28,28,28,28,0,29,29,29,29,29,29,29,29,29,29,29,29,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,31,31,31,31,31,31,31,31,31,31,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,35,35,0,0,0,35,13,37,13,0,13,13,37,37,0,37,37,0,35,35,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0],"f":[0,0,0,[[],1],0,0,0,0,0,[2,2],[2,2],[[]],[[]],[[],2],[[],2],0,[[3,4],5],[[]],[6,[[8,[3,7]]]],[6,[[8,[3,7]]]],[[],[[10,[9]]]],[[]],0,0,[[],8],[[],8],[[],11],[[3,6],[[8,[7]]]],[[3,6],[[8,[7]]]],0,0,0,[[],12],[[13,14],12],0,0,[[]],[[]],[15,12],[[15,4],5],[[15,13,14],12],[[]],[[]],[16,15],[[],8],[[],8],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,18],[[19,17],18],0,[18,18],[[]],0,[[],18],[20,[[8,[19]]]],[[18,18],21],[[],21],[[],21],0,[[],22],[19,22],[[19,4],5],[[18,4],5],[[]],[[]],[21,18],[[]],[[]],0,0,0,[17],[[19,17]],0,[[]],[[],8],[[],8],[[],8],[[],8],[[],11],[[],11],0,0,[[]],[[]],[[23,17],18],[20,[[8,[23]]]],[[23,4],5],[[]],[[]],0,[[],8],[[],8],[[],11],0,[[]],[[]],[[24,17],18],[[],25],[20,[[8,[24]]]],[[24,4],5],0,[[]],[[]],0,0,[[],8],[[],8],[[],11],0,[[]],[[]],0,[[26,17],18],[20,[[8,[26]]]],0,[[26,4],5],[[]],[[]],0,[[],8],[[],8],[[],11],0,[[]],[[]],[[27,17],18],[20,[[8,[27]]]],[[27,4],5],[[]],[[]],0,[[],8],[[],8],[[],11],0,0,[[]],[[]],[[28,17],18],0,[20,[[8,[28]]]],[[28,4],5],[[]],[[]],0,[[],8],[[],8],[[],11],0,[[]],[[]],[[29,17],18],[20,[[8,[29]]]],[[29,4],5],[[]],[[]],0,0,[[],8],[[],8],[[],11],0,[[]],[[]],[[30,17],18],[20,[[8,[30]]]],0,0,[30,22],[[30,4],5],[[]],[[]],[[30,17]],0,0,[[],8],[[],8],[[],11],0,0,[[]],[[]],[[31,17],18],[20,[[8,[31]]]],[[31,4],5],[[]],[[]],[[],8],[[],8],[[],11],0,0,[[]],[[]],[32],0,[[]],[[]],[[[22,[25]]],32],0,0,0,[[],8],[[],8],[[],11],[32],[[32,33,34]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[35,35],[[]],[[],35],[20,[[8,[35]]]],[[35,4],5],[[35,4],5],[[]],[[]],[[]],[[],25],[[],8],[[],8],[[],11],0,[[]],[[]],0,[20,[[8,[13]]]],[13,22],[[13,4],5],[[]],0,[[]],0,0,[[13,17]],[[13,17],18],[[13,[36,[25]]]],[[],8],[[],8],[[],11],0,[[]],[[]],[[37,17,[39,[38]]],34],0,[20,[[8,[37]]]],[[37,[39,[38]]],34],[[37,4],5],[[]],[[[41,[40]]],[[12,[37]]]],[[]],0,0,[[37,17]],0,0,[[],8],[[],8],[[],11],0,[[34,34]],[[]],[[]],0,[[],34],0,[[34,4],5],[[]],0,[[]],[[],34],0,[[],8],[[],8],[[],11],0,[[[41,[40]]],[[12,[[43,[[39,[42]]]]]]]]],"c":[],"p":[[6,"Result"],[3,"Command"],[3,"Args"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[3,"TypeId"],[6,"Result"],[3,"Rule"],[3,"BStr"],[3,"CsvFormatter"],[3,"OsString"],[3,"ByteRecord"],[4,"Status"],[4,"Lints"],[8,"Deserializer"],[15,"bool"],[3,"Vec"],[3,"Checksum"],[3,"Date"],[3,"String"],[3,"Filter"],[3,"Iri"],[3,"Iso639"],[3,"Orcid"],[3,"RefCheck"],[3,"Unicode"],[3,"Progress"],[15,"str"],[3,"Stats"],[4,"Level"],[8,"Into"],[3,"RuleSet"],[8,"Formatter"],[3,"Box"],[3,"Path"],[8,"AsRef"],[8,"Read"],[3,"BufReader"],[8,"Lint"]]},\
"pica_matcher":{"doc":"This crate provides various matcher to filter PICA+ …","t":"NCNNNNNDNEENNDNNCELLLLLLLLLLLLLMLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLALLMALLLLLLLLLLLLLLLLLLNDNNDENNNENDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLMMMCFCFNDNNDNNDINNDNDNEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLMMM","n":["Any","FieldMatcher","InvalidFieldMatcher","InvalidOccurrenceMatcher","InvalidRecordMatcher","InvalidSubfieldMatcher","InvalidTagMatcher","MatcherOptions","None","OccurrenceMatcher","ParseMatcherError","Pattern","Range","RecordMatcher","Simple","Some","SubfieldMatcher","TagMatcher","bitand","bitor","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","case_ignore","case_ignore","clone","clone_into","default","deserialize","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","field_matcher","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_str","into","into","into","into","into","is_match","is_match","is_match","new","new","new","new","not","parser","provide","strsim_threshold","strsim_threshold","subfield_matcher","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Cardinality","CardinalityMatcher","Composite","Exists","ExistsMatcher","FieldMatcher","Group","Not","Singleton","SingletonMatcher","Subfields","SubfieldsMatcher","bitand","bitor","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","is_match","is_match","is_match","is_match","is_match","new","new","new","new","new","not","parse_field_matcher","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","lhs","op","rhs","parse_field_matcher","parse_occurrence_matcher","parse_subfield_matcher","parse_tag_matcher","Cardinality","CardinalityMatcher","Composite","Exists","ExistsMatcher","Group","In","InMatcher","Matcher","Not","Regex","RegexMatcher","Relation","RelationMatcher","Singleton","SingletonMatcher","SubfieldMatcher","bitand","bitor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into","is_match","is_match","is_match","is_match","is_match","is_match","is_match","is_match","new","new","new","new","new","new","new","parse_subfield_matcher","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","lhs","op","rhs"],"q":[[0,"pica_matcher"],[99,"pica_matcher::field_matcher"],[175,"pica_matcher::field_matcher::FieldMatcher"],[178,"pica_matcher::parser"],[182,"pica_matcher::subfield_matcher"],[287,"pica_matcher::subfield_matcher::SubfieldMatcher"]],"d":["","","","","","","","Options and flags which can be used to configure a matcher.","","A matcher that matches against PICA+ Occurrence.","An error that can occur when parsing matcher expressions.","","","A Matcher that works on PICA+ Records.","","","","A matcher that matches against PICA+ Tags.","","","","","","","","","","","","","Whether to ignore case when comparing strings or not.","","","","","","","","","","","","","","","","","","Matcher that works on PICA+ Fields.","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the given occurrence matches against the …","Returns <code>true</code> if the given record matches against the record","Returns <code>true</code> if the given tag matches against the matcher.","Create a new tag matcher.","Create new matcher flags.","Create a new field matcher from a string slice.","Create a new tag matcher.","","Parsers recognizing matcher for PICA+ primitves.","","Set the similarity threshold for the similar operator (<code>=*</code>).","","Matcher that works on PICA+ Subfields.","","","","","","","","","","","","","","","","","","","","A field matcher that checks the number of occurrences of a …","","","A field matcher that checks if a field exists.","A field matcher that allows grouping, negation and …","","","","A field matcher that checks for the singleton matcher.","","A field matcher that checks for fields statifies subfield …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the matcher matches against the given …","Returns <code>true</code> if at least one field exists with a matching …","Returns <code>true</code> if the given field matches against the field …","Returns <code>true</code> if the given field matches against the field …","Returns <code>true</code> if the given field matches against the field …","Create a new exists matcher from a string slice.","Create a new subfields matcher from a string slice.","Create a new singleton matcher from a string slice.","Create a new cardinality matcher from a string slice.","Create a new field matcher from a string slice.","","Parse a field matcher expression.","","","","","","","","","","","","","","","","","","","","","","","","A matcher that checks the number of occurrences of a …","","","A matcher that checks if a subfield exists.","","","A matcher that checks if a subfield value is in a …","A trait that provides the basic matcher API.","","","A matcher that checks a subfield value against a regex.","","A matcher that checks relations between (string) values.","","A matcher that checks for the singleton matcher.","A matcher that allows grouping, negation and connecting of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the matcher matches against the given …","Returns <code>true</code> if at least one subfield is found with a code …","Returns true if at least one subfield is found, when the …","Returns true if at least one subfield value is found, that …","Returns <code>true</code> if at least one subfield is found, where the …","Returns true of number of fields with a code equal to the …","Returns <code>true</code> if the underlying matcher returns <code>true</code>.","","Create a new exists matcher from a string slice.","Create a new relation matcher from a string slice.","Create a new regex matcher from a string slice.","Create a new matcher from a string slice.","Create a new matcher from a string slice.","Create a new singleton matcher from a string slice.","Create a new matcher from a string slice.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[4,0,7,7,7,7,7,0,4,0,0,13,4,0,13,4,0,0,1,1,7,4,2,1,13,7,4,2,1,13,2,2,4,4,2,1,7,4,4,4,1,13,13,13,7,4,1,13,0,7,7,4,2,1,1,13,7,4,4,2,1,13,1,7,4,2,1,13,4,1,13,4,2,1,13,1,0,7,2,2,0,4,7,1,7,4,2,1,13,7,4,2,1,13,7,4,2,1,13,25,0,25,28,0,0,25,25,25,0,28,0,25,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,25,0,26,27,28,29,25,26,27,28,29,25,26,27,28,29,25,40,40,40,0,0,0,0,39,0,33,39,0,33,39,0,0,33,39,0,39,0,33,0,0,33,33,34,35,36,37,38,39,33,34,35,36,37,38,39,33,34,35,36,37,38,39,33,34,35,36,37,38,39,33,34,35,36,37,38,39,33,34,35,36,37,38,39,33,34,35,36,37,38,39,33,41,34,35,36,37,38,39,33,34,35,36,37,38,39,33,0,34,35,36,37,38,39,33,34,35,36,37,38,39,33,34,35,36,37,38,39,33,42,42,42],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1]],[[1,1]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[2,3],2],0,[4,4],[[]],[[],2],[5,[[6,[1]]]],[[7,7],3],[[4,4],3],[[4,[12,[[11,[[10,[[9,[8]]]]]]]]],3],[[4,[11,[[10,[[9,[8]]]]]]],3],[[1,1],3],[[13,13],3],[[13,[14,[[10,[[9,[8]]]]]]],3],[[13,[14,[[10,[[9,[8]]]]]]],3],[[],3],[[],3],[[],3],[[],3],0,[[7,15],16],[[7,15],16],[[4,15],16],[[2,15],16],[[1,15],16],[[1,15],16],[[13,15],16],[[]],[17,4],[[]],[[]],[[]],[[]],[18,[[6,[1]]]],[[]],[[]],[[]],[[]],[[]],[[4,[11,[[10,[[9,[8]]]]]]],3],[[1,[19,[[10,[[9,[8]]]]]],2],3],[[13,[14,[[10,[[9,[8]]]]]]],3],[[[0,[[10,[[9,[8]]]],20]]],[[6,[4,7]]]],[[],2],[18,[[6,[1,7]]]],[[[0,[[10,[[9,[8]]]],20]]],[[6,[13,7]]]],[1],0,[21],[[2,22],2],0,0,[[]],[[],23],[[],23],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],24],[[],24],[[],24],[[],24],[[],24],0,0,0,0,0,0,0,0,0,0,0,0,[[25,25]],[[25,25]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[26,26],3],[[27,27],3],[[28,28],3],[[29,29],3],[[25,25],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[26,15],16],[[27,15],16],[[28,15],16],[[29,15],16],[[25,15],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[26,[0,[30,31]],2],3],[[27,[0,[30,31]],2],3],[[28,[0,[30,31]],2],3],[[29,[0,[30,31]],2],3],[[25,[0,[30,31]],2],3],[18,[[6,[26,7]]]],[18,[[6,[27,7]]]],[18,[[6,[28,7]]]],[18,[[6,[29,7]]]],[18,[[6,[25,7]]]],[25],[[[9,[8]]],[[32,[25]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],24],[[],24],[[],24],[[],24],[[],24],0,0,0,0,[[[9,[8]]],[[32,[4]]]],0,[[[9,[8]]],[[32,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[33,33]],[[33,33]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[34,34],3],[[35,35],3],[[36,36],3],[[37,37],3],[[38,38],3],[[39,39],3],[[33,33],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[34,15],16],[[35,15],16],[[36,15],16],[[37,15],16],[[38,15],16],[[39,15],16],[[33,15],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[0,[30,31]],2],3],[[34,[0,[30,31]],2],3],[[35,[0,[30,31]],2],3],[[36,[0,[30,31]],2],3],[[37,[0,[30,31]],2],3],[[38,[0,[30,31]],2],3],[[39,[0,[30,31]],2],3],[[33,[0,[30,31]],2],3],[18,[[6,[34,7]]]],[18,[[6,[35,7]]]],[18,[[6,[36,7]]]],[18,[[6,[37,7]]]],[18,[[6,[38,7]]]],[18,[[6,[39,7]]]],[18,[[6,[33,7]]]],[[[9,[8]]],[[32,[33]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],0,0,0],"c":[],"p":[[3,"RecordMatcher"],[3,"MatcherOptions"],[15,"bool"],[4,"OccurrenceMatcher"],[8,"Deserializer"],[4,"Result"],[4,"ParseMatcherError"],[15,"u8"],[15,"slice"],[8,"AsRef"],[3,"Occurrence"],[4,"Option"],[4,"TagMatcher"],[3,"Tag"],[3,"Formatter"],[6,"Result"],[6,"OccurrenceMut"],[15,"str"],[3,"Record"],[8,"Display"],[3,"Demand"],[15,"f64"],[3,"String"],[3,"TypeId"],[4,"FieldMatcher"],[3,"ExistsMatcher"],[3,"SubfieldsMatcher"],[4,"SingletonMatcher"],[3,"CardinalityMatcher"],[8,"IntoIterator"],[8,"Clone"],[6,"ParseResult"],[4,"SubfieldMatcher"],[3,"ExistsMatcher"],[3,"RelationMatcher"],[3,"RegexMatcher"],[3,"InMatcher"],[3,"CardinalityMatcher"],[4,"SingletonMatcher"],[13,"Composite"],[8,"Matcher"],[13,"Composite"]]},\
"pica_path":{"doc":"","t":"DDILLLLLLLLLLLLLLLLLKLLLLLLLL","n":["ParsePathError","Path","PathExt","borrow","borrow","borrow_mut","borrow_mut","deserialize","eq","equivalent","fmt","fmt","fmt","from","from","from_str","idn","into","into","new","path","provide","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"pica_path"]],"d":["","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new path from a string slice.","Returns the idn of the record.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new path from a string slice.","","","","","","","","",""],"i":[0,0,0,5,2,5,2,2,2,2,5,5,2,5,2,2,15,5,2,2,15,5,5,5,2,5,2,5,2],"f":[0,0,0,[[]],[[]],[[]],[[]],[1,[[3,[2]]]],[[2,2],4],[[],4],[[5,6],7],[[5,6],7],[[2,6],7],[[]],[[]],[8,[[3,[2]]]],[[],9],[[]],[[]],[8,2],[[2,10],11],[12],[[],13],[[],3],[[],3],[[],3],[[],3],[[],14],[[],14]],"c":[],"p":[[8,"Deserializer"],[3,"Path"],[4,"Result"],[15,"bool"],[3,"ParsePathError"],[3,"Formatter"],[6,"Result"],[15,"str"],[4,"Option"],[3,"MatcherOptions"],[3,"Vec"],[3,"Demand"],[3,"String"],[3,"TypeId"],[8,"PathExt"]]},\
"pica_record":{"doc":"This crate provides the low-level primitives to work with …","t":"DDGGNNNNNDGGEDGGDDGGDGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIDNQNDEDDIDLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLKLLGFFFFFF","n":["ByteRecord","Field","FieldMut","FieldRef","InvalidField","InvalidOccurrence","InvalidRecord","InvalidSubfield","InvalidTag","Occurrence","OccurrenceMut","OccurrenceRef","ParsePicaError","Record","RecordMut","RecordRef","StringRecord","Subfield","SubfieldMut","SubfieldRef","Tag","TagMut","TagRef","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","code","deref","deref","deref","deref_mut","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_unchecked","from_unchecked","index","into","into","into","into","into","into","into","into","into_iter","into_iter","into_owned","into_owned","into_owned","into_owned","into_owned","into_owned","io","is_empty","is_empty","iter","new","new","new","new","new","occurrence","parser","partial_cmp","provide","retain","retain","subfields","tag","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate","validate","validate","value","write_to","write_to","write_to","write_to","write_to","BufReadExt","ByteRecordWrite","GzipWriter","Io","Item","Parse","PlainWriter","ReadPicaError","Reader","ReaderBuilder","RecordsIterator","WriterBuilder","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","finish","finish","finish","fmt","fmt","fmt","for_pica_record","from","from","from","from","from","from","from","from","from_path","from_path","from_path_or_stdout","from_reader","gzip","into","into","into","into","into","into","into_inner","is_invalid_record","limit","new","new","new","new","new","next","next","provide","source","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","write_byte_record","write_byte_record","write_byte_record","ParseResult","parse_field","parse_occurrence","parse_occurrence_digits","parse_subfield_code","parse_subfield_value","parse_tag"],"q":[[0,"pica_record"],[183,"pica_record::io"],[270,"pica_record::parser"]],"d":["A PICA+ record, that may contian invalid UTF-8 data.","A PICA+ field.","A mutable PICA+ field.","A immutable PICA+ field.","","","","","","A PICA+ occurrence.","A mutable PICA+ occurrence.","A immutable PICA+ occurrence.","An error that can occur when parsing PICA+ records.","A PICA+ record.","A mutable PICA+ tag.","A immutable PICA+ record.","A PICA+ record, that guarantees valid UTF-8 data.","A PICA+ subfield.","A mutable PICA+ subfield.","A immutable PICA+ subfield.","A PICA+ tag.","A mutable PICA+ tag.","A immutable PICA+ tag.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the code of the subfield.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates an immutable PICA+ field from a byte slice.","Creates an immutable PICA+ tag from a byte slice.","Creates an PICA+ record from a byte slice.","Creates an PICA+ record from a byte slice.","Creates an PICA+ record from a byte slice.","Creates an immutable PICA+ subfield from a byte slice.","Creates an PICA+ tag from a byte slice.","Creates a new Occurrence without checking the input","Creates a new Tag without checking the input.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an iterator from a single field. The iterator just …","Creates an iterator from a single subfield. The iterator …","Converts the immutable tag into its mutable counterpart by …","Converts the immutable occurrence into its mutable …","Converts the immutable tag into its mutable counterpart by …","Converts the immutable occurrence into its mutable …","Converts the immutable subfield into its mutable …","Converts the immutable tag into its mutable counterpart by …","Utilities for reading and writing PICA+ records.","Returns <code>true</code> if the record contains no fields, otherwise …","Returns true if the subfield value is empty.","Returns an iterator over the fields of the record.","Create a new field.","Create a new PICA+ occurrence.","Create a new record.","Create a new subfield.","Create a new PICA+ tag.","Returns a reference to the occurrence of the field.","Parsers recognizing low-level primitives (e.g. subfield …","","","Retains only the fields specified by the predicate.","Retains only the fields specified by the predicate.","Returns the subfields of the field.","Returns the tag of the field.","Converts the immutable tag into its mutable counterpart.","Converts the immutable tag into its mutable counterpart.","","Converts the immutable tag into its mutable counterpart.","Converts the immutable tag into its mutable counterpart.","","","Converts the immutable subfield into its mutable …","","Converts the immutable tag into its mutable counterpart.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an <code>std::str::Utf8Error</code> if the field contains …","Returns an <code>std::str::Utf8Error</code> if the record contains …","Returns an <code>std::str::Utf8Error</code> if the subfield value …","Returns the value of the subfield.","Write the field into the given writer.","Write the occurrence into the given writer.","Write the record into the given writer.","Write the record into the given writer.","Write the subfield into the given writer.","An extension of BufRead which provides a convenience API …","A tait that permits writing ByteRecords.","A ByteRecord writer that gzip encodes records.","","","","A plain buffered ByteRecord writer.","An error that can occur when reading PICA+ records from a …","","Configures and builds a PICA+ reader.","","Configures and build a ByteRecord writer.","Whether to append to a given file or not.","","","","","","","","","","","","","","","Finish the underlying writer.","","","","","","Executes the given closure on each parsed line in the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Builds a ByteRecord writer from this configuration that …","Builds a ByteRecord writer from this configuration that …","","Whether to use a gzip encoder or not.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true, if the underlying error was caused by …","Change the limit of records to read.","","","","Create a new ReaderBuilder.","Creates a new builder with default settings.","","","","","","","","","","","","","","","","","","","","","","","","Writes a ByteRecord into this writer.","","","Holds the result of a parsing function.","Parse a PICA+ field.","Parse a PICA+ occurrence (read-only).","Parse the digits of an PICA+ occurrence.","Parse a PICA+ subfield code.","Parse a PICA+ subfield value.","Parse a PICA+ tag."],"i":[0,0,0,0,13,13,13,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,5,6,7,11,12,8,9,13,5,6,7,11,12,8,9,5,6,7,8,9,5,6,7,8,9,8,11,12,9,11,13,5,6,6,6,7,8,9,9,9,13,5,6,7,8,9,13,13,5,6,7,11,12,8,9,9,21,23,24,25,13,5,6,7,11,12,8,9,5,6,7,11,12,8,9,6,9,9,13,5,6,7,11,12,8,9,5,8,20,31,5,6,8,9,0,7,8,7,5,6,7,8,9,5,0,6,13,7,11,5,5,20,31,5,5,6,6,7,8,8,9,9,31,13,9,13,5,6,7,11,12,12,8,9,13,5,6,7,11,12,8,9,13,5,6,7,11,12,8,9,5,7,8,8,5,6,7,11,8,0,0,0,47,57,47,0,0,0,0,0,0,43,52,45,46,44,43,47,52,45,46,44,43,47,44,43,53,45,46,44,47,47,58,52,45,46,44,43,47,47,47,44,43,43,44,43,52,45,46,44,43,47,52,47,44,52,45,46,44,43,57,52,47,47,47,52,45,46,44,43,47,52,45,46,44,43,47,52,45,46,44,43,47,53,45,46,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[[0,[1,[4,[[3,[2]]]]]]]]],[[5,[[0,[1,[4,[[3,[2]]]]]]]]]],[[[6,[[0,[1,[4,[[3,[2]]]]]]]]],[[6,[[0,[1,[4,[[3,[2]]]]]]]]]],[[[7,[[0,[1,[4,[[3,[2]]]]]]]]],[[7,[[0,[1,[4,[[3,[2]]]]]]]]]],[[[8,[[0,[1,[4,[[3,[2]]]]]]]]],[[8,[[0,[1,[4,[[3,[2]]]]]]]]]],[[[9,[[0,[1,[4,[[3,[2]]]]]]]]],[[9,[[0,[1,[4,[[3,[2]]]]]]]]]],[[]],[[]],[[]],[[]],[[]],[[[8,[[4,[[3,[2]]]]]]],10],[11],[12],[[[9,[[4,[[3,[2]]]]]]]],[11],[[13,13],14],[[[5,[[0,[15,[4,[[3,[2]]]]]]]],[5,[[0,[15,[4,[[3,[2]]]]]]]]],14],[[[6,[[4,[[3,[2]]]]]],16],14],[[[6,[[4,[[3,[2]]]]]],16],14],[[[6,[[4,[[3,[2]]]]]],[6,[[4,[[3,[2]]]]]]],14],[[[7,[[0,[15,[4,[[3,[2]]]]]]]],[7,[[0,[15,[4,[[3,[2]]]]]]]]],14],[[[8,[[0,[15,[4,[[3,[2]]]]]]]],[8,[[0,[15,[4,[[3,[2]]]]]]]]],14],[[[9,[[4,[[3,[2]]]]]],[9,[[4,[[3,[2]]]]]]],14],[[[9,[[4,[[3,[2]]]]]],16],14],[[[9,[[4,[[3,[2]]]]]],16],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[13,17],18],[[13,17],18],[[[5,[[0,[19,[4,[[3,[2]]]]]]]],17],18],[[[6,[[0,[19,[4,[[3,[2]]]]]]]],17],18],[[[7,[[0,[19,[4,[[3,[2]]]]]]]],17],18],[[11,17],18],[[12,17],18],[[[8,[[0,[19,[4,[[3,[2]]]]]]]],17],18],[[[9,[[4,[[3,[2]]]]]],17],18],[[[9,[[0,[19,[4,[[3,[2]]]]]]]],17],18],[20,21],[[[6,[22]]],23],[[[8,[22]]],24],[[[9,[22]]],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[2]]],[[28,[[5,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]],13]]]],[[[3,[2]]],[[28,[[6,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]],13]]]],[[[3,[2]]],[[28,[[7,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]],13]]]],[[[3,[2]]],[[28,[11,13]]]],[[[3,[2]]],[[28,[12,13]]]],[[[3,[2]]],[[28,[[8,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]],13]]]],[[[3,[2]]],[[28,[[9,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]],13]]]],[[[29,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]]],[[6,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]]]],[[[29,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]]],[[9,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]]]],[[[9,[[4,[[3,[2]]]]]],30]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[[4,[[3,[2]]]]]]]],[[[8,[[4,[[3,[2]]]]]]]],[20,21],[31,23],[[[5,[22]]],21],[[[6,[22]]],23],[[[8,[22]]],24],[[[9,[22]]],25],0,[[[7,[[4,[[3,[2]]]]]]],14],[[[8,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]]],14],[[[7,[[4,[[3,[2]]]]]]],[[32,[[5,[[4,[[3,[2]]]]]]]]]],[[[29,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]],[33,[[29,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]]]],34],[[5,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]]]],[[[29,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]]],[[6,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]]]],[34,[[7,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]]]],[[10,[29,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]]],[[8,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]]]],[[[29,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]]],[[9,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]]]],[[[5,[[4,[[3,[2]]]]]]],[[33,[[6,[[4,[[3,[2]]]]]]]]]],0,[[[6,[[4,[[3,[2]]]]]],[6,[[4,[[3,[2]]]]]]],[[33,[35]]]],[36],[[[7,[[4,[[3,[2]]]]]],37]],[[11,37]],[[[5,[[4,[[3,[2]]]]]]],[[34,[[8,[[4,[[3,[2]]]]]]]]]],[[[5,[[4,[[3,[2]]]]]]],[[9,[[4,[[3,[2]]]]]]]],[20,21],[31,23],[[]],[[[5,[22]]],21],[[[6,[22]]],23],[[]],[[]],[[[8,[22]]],24],[[]],[[[9,[22]]],25],[[]],[31,38],[[],38],[[],38],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[11,[[28,[12]]]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[[5,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]]],[[28,[40]]]],[[[7,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]]],[[28,[40]]]],[[[8,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]]],[[28,[40]]]],[[[8,[[4,[[3,[2]]]]]]],[[4,[[3,[2]]]]]],[[[5,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]],41],42],[[[6,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]],41],42],[[[7,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]],41],42],[[11,41],42],[[[8,[[0,[[4,[[3,[2]]]],[26,[22]],27]]]],41],42],0,0,0,0,0,0,0,0,0,0,0,0,[[43,14],43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],44],[[],43],[[],42],[[[45,[41]]],42],[[[46,[41]]],42],[[44,17],18],[[47,17],18],[[47,17],18],[37,[[28,[47]]]],[[]],[[]],[[]],[[]],[[]],[[]],[48,47],[13,47],[[44,[4,[49]]],[[42,[[52,[[51,[50]]]]]]]],[[43,[4,[49]]],[[42,[[51,[53]]]]]],[[43,[33,[[4,[49]]]]],[[42,[[51,[53]]]]]],[[44,50],[[52,[50]]]],[[43,14],43],[[]],[[]],[[]],[[]],[[]],[[]],[[[52,[50]]],[[54,[50]]]],[47,14],[[44,30],44],[[44,50],[[52,[50]]]],[41,[[45,[41]]]],[41,[[46,[41]]]],[[],44],[[],43],[[],33],[[[52,[50]]],33],[36],[47,[[33,[55]]]],[[],38],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[11,42],[[[45,[41]],11],42],[[[46,[41]],11],42],0,[[[3,[2]]],56],[[[3,[2]]],[[56,[22]]]],[[[3,[2]]],[[56,[22]]]],[[[3,[2]]],[[56,[10]]]],[[[3,[2]]],[[56,[22]]]],[[[3,[2]]],[[56,[22]]]]],"c":[],"p":[[8,"Clone"],[15,"u8"],[15,"slice"],[8,"AsRef"],[3,"Field"],[3,"Occurrence"],[3,"Record"],[3,"Subfield"],[3,"Tag"],[15,"char"],[3,"ByteRecord"],[3,"StringRecord"],[4,"ParsePicaError"],[15,"bool"],[8,"PartialEq"],[15,"str"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[6,"FieldRef"],[6,"FieldMut"],[3,"BStr"],[6,"OccurrenceMut"],[6,"SubfieldMut"],[6,"TagMut"],[8,"From"],[8,"Display"],[4,"Result"],[8,"Into"],[15,"usize"],[6,"OccurrenceRef"],[3,"Iter"],[4,"Option"],[3,"Vec"],[4,"Ordering"],[3,"Demand"],[8,"FnMut"],[3,"String"],[3,"TypeId"],[3,"Utf8Error"],[8,"Write"],[6,"Result"],[3,"WriterBuilder"],[3,"ReaderBuilder"],[3,"PlainWriter"],[3,"GzipWriter"],[4,"ReadPicaError"],[3,"Error"],[3,"Path"],[8,"Read"],[3,"Box"],[3,"Reader"],[8,"ByteRecordWrite"],[3,"BufReader"],[8,"Error"],[6,"ParseResult"],[8,"RecordsIterator"],[8,"BufReadExt"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
